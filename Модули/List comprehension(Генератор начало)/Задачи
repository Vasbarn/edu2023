Цели практической работы
Научиться:

использовать list comprehensions (с условной логикой и без неё) для генерации списков;
применять срезы списков для создания копии, получения части списка и изменения объектов внутри списка;
работать с индексами и срезами строк для решения задач.


Что входит в работу
Гласные буквы.
Генерация.
Случайные соревнования.
Тренировка со срезами.
Разворот.
Двумерный список.
Список списков.
Шифр Цезаря.
Во всех заданиях используйте list comprehensions для генерации списков.



Задание 1. Гласные буквы
Что нужно сделать
Команде лингвистов понравилось качество ваших программ, поэтому они решили заказать функцию для анализатора текста, которая создавала бы список гласных букв в нём и считала бы их количество.

Напишите программу, которая запрашивает у пользователя текст и генерирует список гласных букв этого материала (сама строка вводится на русском языке). Выведите в консоль сам список и его длину.

Пример:

Введите текст: Нужно отнести кольцо в Мордор!

Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']

Длина списка: 9

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 2. Генерация
Что нужно сделать
Пользователь вводит целое число N. Вам необходимо написать программу, которая генерирует список из чисел от 0 до N (не включая N). Например, если N — это 5, то нужно работать со списком 0, 1, 2, 3, 4.

Также есть дополнительное условие. При заполнении списка нужно выполнить одно из двух действий с каждым числом:

если индекс числа чётный (или 0), то вместо числа необходимо взять 1;
если индекс числа нечётный, то вместо числа необходимо взять остаток от деления этого числа на 5 (число % 5).
Таким образом нужен следующий алгоритм:

цикл по числам

    если текущий индекс чётный

        то в список добавляется 1

    если текущий индекс нечётный

        то в список добавляется (число % 5)

Алгоритм нужно реализовать при помощи генератора списка (в одну строку).

Пример:

Введите длину списка: 10

Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует указанному в задаче.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 3. Случайные соревнования
Что нужно сделать
Мы хотим протестировать работу электронной таблицы для участников некоторых соревнований. Есть два списка, то есть две команды, по 20 участников в каждом. В них хранятся очки каждого участника — вещественные числа с двумя знаками после точки, например 4.03.

Член одной команды соревнуется с участником другой команды под таким же номером. То есть первый соревнуется с первым, второй — со вторым и так далее.

Напишите программу, которая генерирует два списка участников (по 20 элементов) из случайных вещественных чисел (от 5 до 10). Для этого найдите подходящую функцию из модуля random. Затем сгенерируйте третий список, в котором окажутся только победители из каждой пары.

Пример:

Первая команда: [7.86, 6.76, 9.97, 9.08, 5.45, 6.9, 8.65, 5.17, 8.17, 5.06, 7.56, 7.1, 7.18, 8.25, 5.53, 7.95, 8.91, 7.11, 8.29, 9.52]

Вторая команда: [7.13, 5.7, 8.89, 5.36, 5.62, 9.46, 5.82, 8.67, 8.41, 7.0, 5.31, 7.8, 9.93, 7.76, 7.4, 8.26, 7.94, 5.71, 7.89, 7.77]

Победители тура: [7.86, 6.76, 9.97, 9.08, 5.62, 9.46, 8.65, 8.67, 8.41, 7.0, 7.56, 7.8, 9.93, 8.25, 7.4, 8.26, 8.91, 7.11, 8.29, 9.52]

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 4. Тренировка со срезами
Что нужно сделать
Дана строка, в которой хранятся первые семь букв английского алфавита.

alphabet = 'abcdefg'

Напишите программу, которая выводит на экран десять таких результатов:

копию строки;
элементы строки в обратном порядке;
каждый второй элемент строки (включая самый первый);
каждый второй элемент строки после первого;
все элементы до второго;
все элементы, начиная с конца до предпоследнего;
все элементы в диапазоне индексов от 3 до 4 (не включая 4);
последние три элемента строки;
все элементы в диапазоне индексов от 3 до 4;
то же, что и в предыдущем пункте, но в обратном порядке.
Для получения и вывода результатов используйте только команду print и срезы.

Результаты работы программы:

1: abcdefg

2: gfedcba

3: aceg

4: bdf

5: a

6: g

7: d

8: efg

9: de

10: ed

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Для получения результата используются только print и срезы переменной alphabet.

Задание 5. Разворот
Что нужно сделать
На вход в программу подаётся строка, в которой буква h встречается как минимум два раза. Реализуйте код, который разворачивает последовательность символов, заключённую между первым и последним появлением буквы h, в противоположном порядке.

Пример 1:

Введите строку: hqwehrty

Развёрнутая последовательность между первым и последним h: ewq.

Пример 2:

Введите строку: hh

Развёрнутая последовательность между первым и последним h:

Пример 3:

Введите строку: hhqwerh

Развёрнутая последовательность между первым и последним h: rewqh.

Советы и рекомендации
Индекс нужного элемента можно искать как вручную, так и при помощи готовых методов списка.
У метода index есть «брат» — метод rindex. В отличие от первого второй метод начинает поиск с правой стороны (с конца). Подробнее о нём вы можете узнать в этой статье.
Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.


Задание 6. Двумерный список
Что нужно сделать
Часто в программировании приходится писать код исходя из результата, который требует заказчик. В этот раз ему нужно получить двумерный список:

[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

Напишите программу, которая генерирует такой список и выводит его на экран. Используйте только list comprehensions.

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру: двумерный список с числами без текста.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 7. Список списков
Что нужно сделать
Дан многомерный список:

nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

Напишите код, который раскрывает все вложенные списки, то есть оставляет лишь внешний список. Для решения используйте только list comprehensions.

Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует ответу.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 8. Шифр Цезаря
Что нужно сделать
Юлий Цезарь использовал свой способ шифрования текста. Каждая буква заменялась на следующую по алфавиту через K позиций по кругу. Если взять русский алфавит и K, равное 3, то в слове, которое мы хотим зашифровать, буква А станет буквой Г, Б станет Д и так далее.

Пользователь вводит сообщение и значение сдвига. Напишите программу, которая изменит фразу при помощи шифра Цезаря.

Пример:

Введите сообщение: это питон.

Введите сдвиг: 3

Зашифрованное сообщение: ахс тлхср.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Алгоритм шифрования вынесен в отдельную функцию.
Переменные и функции имеют значимые имена, не только a, b, c, d.