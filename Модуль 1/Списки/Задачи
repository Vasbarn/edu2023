Цели практической работы
Отработать представление информации в Python в виде списка:
добавление элементов в список;
обращение к элементам списка, их изменение и вывод на экран.
Научиться использовать итерацию по списку с помощью цикла.
Научиться работать с элементами списка с помощью цикла.
Понять, как применять функции list и len.

Что входит в работу
Генерация списка.
Турнир.
Видеокарты.
Кино.
Контейнеры.
Бегущие цифры.
Анализ слова — 2.
Сортировка.
Обратный анализ чётных чисел

Задание 1. Генерация списка
Что нужно сделать
Дано целое число N. Напишите программу, которая формирует список из нечётных чисел от одного до N.

Пример 1:

Введите число: 1

Список из нечётных чисел от одного до N: [1]

Пример 2:

Введите число: 14

Список из нечётных чисел от одного до N: [1, 3, 5, 7, 9, 11, 13]

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 2. Турнир
Что нужно сделать
Для двух дней соревнований по волейболу необходимо сформировать турнирную сетку из восьми человек. На первый день из списка участников решили выбрать каждого второго.

Дан список из восьми имён: Артемий, Борис, Влад, Гоша, Дима, Евгений, Женя, Захар. Напишите программу, которая выводит элементы списка только с чётными индексами.

Пример:

Первый день: ['Артемий', 'Влад', 'Дима', 'Женя']

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 3. Видеокарты
Что нужно сделать
В базе магазина электроники есть список видеокарт компании NVIDIA разных поколений. Вместо полных названий хранятся только числа, которые обозначают модель и поколение видеокарты. Недавно компания выпустила новую линейку видеокарт. Самые старшие поколения разобрали за пару дней.

Напишите программу, которая удаляет наибольшие элементы из списка видеокарт.

Пример:

Количество видеокарт: 5

Видеокарта 1: 3070

Видеокарта 2: 2060

Видеокарта 3: 3090

Видеокарта 4: 3070

Видеокарта 5: 3090


Старый список видеокарт: [ 3070 2060 3090 3070 3090 ]

Новый список видеокарт: [ 3070 2060 3070 ]

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 4. Кино
Что нужно сделать
Илья зашёл на любительский киносайт, на котором пользователи оставляют рецензии на фильмы. Их список:

films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]

Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов в список любимых, чтобы позже прочитать рецензии на них.

Напишите программу, в которой пользователь вводит фильм. Если кинокартина есть в перечне, то добавляется в список любимых. Если её нет, то выводится ошибка. В конце выведите весь список любимых фильмов.

Пример:

Сколько фильмов хотите добавить? 3

Введите название фильма: Леон

Введите название фильма: Безумный Макс

Ошибка: фильма Безумный Макс у нас нет :(

Введите название фильма: Мементо

Ваш список любимых фильмов: Леон, Мементо

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 5. Контейнеры
Что нужно сделать
Контейнеры на складе лежат в ряд в порядке невозрастания (меньше либо равно) массы в килограммах. На склад привезли ещё один контейнер, который тоже нужно положить на определённое место.

Напишите программу, которая получает на вход невозрастающую последовательность натуральных чисел. Они означают массу каждого контейнера в ряду. После этого вводится число X — масса нового контейнера. Программа выводит номер, под которым будет лежать новый контейнер. Если в ряду есть контейнеры с массой, как у нового, то его нужно положить после них.

Обеспечьте контроль ввода: все числа не превышают 200.

Пример:

Количество контейнеров: 8

Введите вес контейнера: 165

Введите вес контейнера: 163

Введите вес контейнера: 160

Введите вес контейнера: 160

Введите вес контейнера: 157

Введите вес контейнера: 157

Введите вес контейнера: 155

Введите вес контейнера: 154

Введите вес нового контейнера: 162

Номер, который получит новый контейнер: 3

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 6. Бегущие цифры
Что нужно сделать
Вы пишете программу для маленького табло, в котором циклически повторяется один и тот же текст или числа, например как в метро, автобусах или трамваях.

Дан список из N элементов и целое число K. Напишите программу, которая циклически сдвигает элементы списка вправо на K позиций. Используйте минимально возможное количество операций присваивания.

Пример 1:

Сдвиг: 1

Изначальный список: [1, 2, 3, 4, 5]

Сдвинутый список: [5, 1, 2, 3, 4]

Пример 2:

Сдвиг: 3

Изначальный список: [1, 4, –3, 0, 10]

Сдвинутый список: [–3, 0, 10, 1, 4]

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 7. Анализ слова — 2
Что нужно сделать
Продолжите писать анализаторы для текста. Теперь необходимо реализовать код, с помощью которого можно определять палиндромы, то есть слова, которые читаются одинаково слева направо и справа налево.

Напишите такую программу.

Пример 1:

Введите слово: мадам

Слово является палиндромом

Пример 2:

Введите слово: abccba

Слово является палиндромом

Пример 3:

Введите слово: abbd

Слово не является палиндромом

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 8. Сортировка
Что нужно сделать
Дан список из N чисел. Напишите программу, которая сортирует элементы списка по возрастанию и выводит их на экран. Дополнительный список использовать нельзя.

Постарайтесь придумать и написать как можно более эффективный алгоритм сортировки.

Пример:

Изначальный список: [1, 4, –3, 0, 10]

Отсортированный список: [–3, 0, 1, 4, 10]

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.

Задание 9. Обратный анализ чётных чисел
Контекст
Вы работаете в научной лаборатории, в ней проводятся эксперименты и записываются результаты в виде списка целых чисел. Ваша задача — написать программу, которая поможет исследователям выделить чётные числа из списка результатов экспериментов. Они хотят анализировать эти числа в обратном порядке, чтобы исследовать особые закономерности, связанные с чётными значениями.

Задача
Напишите программу, которая считывает целые числа из списка и выводит из него только чётные в обратном порядке. Создавать дополнительные списки нельзя.r

Ограничения
Нельзя использовать:

метод reverse,
функцию reversed,
разворот при помощи среза (список[::-1]).
Советы
Вы можете управлять направлением перебора элементов в списке (можете перебирать элементы с начала до конца, а можете начать с конца и двигаться к началу). Это может стать основой решения задачи.
Список является изменяемым типом данных, значит вы можете изменять положение элементов внутри списка. Это может стать основой ещё одного варианта решения задачи. Можете выбрать любой или решить обоими способами!
Обратите внимание: некоторые операции со списками создают их копии, даже если вы не указываете на это явно. Простой пример, который это демонстрирует:
test = [1, 2, 3]
print(id(test)) # Здесь вы увидите один айди
test = test[::-1]
print(id(test)) # А здесь уже другой
