Цели практической работы
Применить разные способы форматирования строк для чистоты кода и вывода значений на экран.
Отработать представление информации в Python в виде строки и научиться:
разбивать вводимый текст по разделителю и составлять из него список слов;
«склеивать» слова из списка оптимизированным методом, без конкатенации;
использовать другие методы строк, в том числе методы проверки текста и работы с регистром.

Что входит в работу
Задание 1. Меню ресторана.
Задание 2. Самое длинное слово.
Задание 3. Файлы.
Задание 4. Заглавные буквы.
Задание 5. Пароль.
Задание 6. Сжатие.
Задание 7. IP-адрес 2.
Задание 8. Бегущая строка.
Задание 9. Анализ комментариев
Во всех задачах для склеивания строк используйте метод join, а не конкатенацию.


Задание 1. Меню ресторана
Что нужно сделать
Ресторан заказал вам приложение, которое в один клик отображает пользователю меню. Для работы ресторан предоставил вам свой сайт, где можно найти меню в виде идущих подряд названий блюд.

Напишите программу, которая выводит меню на экран. На вход подаётся строка из названий блюд, разделённых символом «;», а на выходе названия перечисляются через запятую и пробел.

Пример:

Доступное меню: утиное филе;фланк-стейк;банановый пирог;плов.

Сейчас в меню есть: утиное филе, фланк-стейк, банановый пирог, плов.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 2. Самое длинное слово
Что нужно сделать
Пользователь вводит строку, содержащую пробелы. Найдите в ней самое длинное слово, выведите его и его длину. Если таких слов несколько, выведите первое.

Пример 1

Введите строку: я есть строка.

Самое длинное слово: «строка».

Длина этого слова: 6 символов.

Пример 2

Введите строку: а б.

Самое длинное слово: «а».

Длина этого слова: 1 символ.

Пример 3

Введите строку: б.

Самое длинное слово: «б».

Длина этого слова: 1 символ.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 3. Файлы
Что нужно сделать
В IT-компании есть негласные правила именования текстовых документов:

Название файла не может начинаться с одного из специальных символов: @, №, $, %, ^, &, *, ().
Файл должен заканчиваться расширением .txt или .docx.
Напишите программу, которая получает на вход полное название файла и проверяет, соответствует ли он этим правилам.

Пример 1

Название файла: @example.txt.

Ошибка: название начинается недопустимым символом.

Пример 2

Название файла: example.ttx.

Ошибка: неверное расширение файла. Ожидалось .txt или .docx.

Пример 3

Название файла: example.txt.

Файл назван верно.

Советы и рекомендации
Метод endswith (как и startswith) можно использовать для проверки нескольких окончаний. Примеры такого использования.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 4. Заглавные буквы
Что нужно сделать
Пользователь вводит строку. Напишите программу, которая меняет регистр символов в этой строке так, чтобы первая буква каждого слова была прописной, а остальные — строчными.

Пример

Введите строку: Кажется, я забыл выключить утюг.

Результат: Кажется, Я Забыл Выключить Утюг.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует указанному в задаче.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 5. Пароль
Что нужно сделать
При регистрации на сайте, помимо логина, нужно придумать пароль. Этот пароль должен состоять минимум из восьми символов, содержать хотя бы одну большую букву и не менее трёх цифр. Тогда он будет считаться надёжным.

Напишите программу, которая просит пользователя придумать пароль до тех пор, пока этот пароль не станет надёжным. Должна использоваться латиница.

Пример

Придумайте пароль: qwerty.

Пароль ненадёжный. Попробуйте ещё раз.

Придумайте пароль: qwerty12.

Пароль ненадёжный. Попробуйте ещё раз.

Придумайте пароль: qwerty123.

Пароль ненадёжный. Попробуйте ещё раз.

Придумайте пароль: qWErty123.

Это надёжный пароль.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 6. Сжатие
Что нужно сделать
Из-за того, что объём данных увеличился, понадобилось сжать эти данные, но так, чтобы не потерять важную информацию. Для этого было придумано специальное кодирование: s = 'aaaabbсaa' преобразуется в 'a4b2с1a2'. То есть группы одинаковых символов исходной строки заменяются на эти символы и количество их повторений в строке.

Напишите программу, которая считывает строку, кодирует её, используя предложенный алгоритм, и выводит закодированную последовательность на экран. Код должен учитывать регистр символов.

Пример

Введите строку: aaAAbbсaaaA.

Закодированная строка: a2A2b2с1a3A1.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 7. IP-адрес 2
Что нужно сделать
При написании клиент-серверного приложения часто приходится работать с IP-адресами. Как вы уже знаете, IP-адрес состоит из четырёх целых чисел в диапазоне от 0 до 255, разделённых точками.

Пользователь вводит строку. Напишите программу, которая определяет, действительно ли заданная строка — правильный IP-адрес. Обеспечьте контроль ввода, где предусматривается добавление целых чисел от 0 до 255 и точек между ними.

Пример 1

Введите IP: 128.16.35.a4

a4 — это не целое число.

Пример 2

Введите IP: 240.127.56.340

340 превышает 255.

Пример 3

Введите IP: 34.56.42,5

Адрес — это четыре числа, разделённые точками.

Пример 4

Введите IP: 128.0.0.255

IP-адрес корректен.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 8. Бегущая строка
Что нужно сделать
В одной из практических работ вы писали программу для табло, которая циклически сдвигает элементы списка чисел вправо на K позиций. В этот раз вы работаете с двумя строками. Возможно, одна из строк немного сдвинута. Нужно проверить, не равна ли первая строка второй.

Пользователь вводит две строки. Напишите программу, которая определяет, можно ли получить первую строку из второй циклическим сдвигом.

По желанию: если строку получить можно, выведите значение сдвига.

Пример 1

Первая строка: abcd.

Вторая строка: cdab.

Первая строка получается из второй со сдвигом 2.

Пример 2

Первая строка: abcd.

Вторая строка: cdba.

Первую строку нельзя получить из второй с помощью циклического сдвига.

Что оценивается
Результат вычислений корректен.
Input содержит корректные приглашения для ввода.
Формат вывода соответствует примеру.
Переменные и функции имеют значимые имена, не только a, b, c, d.

Задание 9. Анализ комментариев
Контекст
Вы разрабатываете программу, которая анализирует тексты, написанные пользователем, и выдаёт статистику по использованию заглавных и строчных букв.

Это может быть полезно, например, при анализе комментариев в социальных сетях или обработке текстовых данных для исследований.

Задача
Напишите программу, которая считывает строку и выводит количество заглавных и строчных букв в строке, используя методы строк.

Программа должна это делать за один проход по строке.

Решение должно быть оформлено в виде функции, которая принимает на вход строку-текст, а на выход возвращает два числа (количество заглавных и строчных букв).

Пример:

text = input("Введите строку для анализа: ")
uppercase, lowercase = count_uppercase_lowercase(text)
print("Количество заглавных букв:", uppercase)
print("Количество строчных букв:", lowercase)
Вывод в консоли:

Введите строку для анализа: Hello World!
Количество заглавных букв: 2
Количество строчных букв: 8
Советы
Вспомните методы строк, которые изучили. Выберите из них те, которые помогут вам выполнить проверку буквы (является ли она заглавной или нет).
Чтобы вернуть несколько элементов из функции, перечислите их через запятую:
return a, b
